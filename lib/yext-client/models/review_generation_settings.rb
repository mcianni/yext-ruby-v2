=begin
#Yext API

# 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module YextClient

  class ReviewGenerationSettings
    # Indicates the minimum number of days that must pass before a given contact can be sent another review invitation. This setting will prevent you from contacting the same person repeatedly in a short time period.  If null, no maximum contact frequency will be enforced. 
    attr_accessor :max_contact_frequency

    # Enables review invitations by text and indicates the maximum number of text invites our system will send on a per-location, per-day basis. We will send a maximum of 20 text invites per location per day.  If null, review invitations by text will be disabled. 
    attr_accessor :max_texts_per_day

    #  A list of third-party sites to generate reviews on. Sites may also be weighted, resulting in certain sites generating more reviews than others. The balancing algorithm will attempt to achieve Weight/(Sum of All Weights)% of review count on each specified site.  Can contain a maximum of 10 sites. Including 0 sites is also acceptable.  Each site in the request must have a corresponding weight.  Valid weights are integers 1-9  NOTE: Retrieve site **`id`**s via the Publishers: List endpoint. Valid sites will have `REVIEW MONITORING` listed in **`features`**. 
    attr_accessor :site_distribution

    #  Sets optimization settings for the balancing algorithm.  Must include one of the following:  * **`DISTRIBUTION`**: The balancing algorithm will prefer following the weighting distribution specified in **`siteDistribution`**, even if users will be sent to sites they are not logged in to as a result. * **`MORE_REVIEWS`**: The balancing algorithm will attempt to generate as many reviews as possible by sending users to sites they are logged in to, even if the distribution will be less closely followed as a result. 
    attr_accessor :balancing_optimization

    #  Specifies one or more algorithms to address problems with your reviews. If more than one algorithm is specifed, the algorithms are applied in the order they are listed.  Must include at least one of the following:  * **`WEBSITE`**: Generate more first-party reviews when a 1-star review is visible on the first page (i.e., within the last five reviews). * **`RATING`**: Focus on selected sites that have a rating significantly below the location's average. * **`RECENCY`**: Ensure each selected site has one review within the last month. 
    attr_accessor :algorithm_configuration

    # Prevents first-party reviews from immediately showing up on your website or wherever else you show your reviews. During this quarantine period, you may respond to reviews, increasing the likelihood that your customers will revise or remove their negative reviews. 
    attr_accessor :review_quarantine_days

    # Review-collection pages contain a link to the Yext privacy policy by default. This field lets you replace that link with a link to your own privacy policy.  Update request must contain a URL or null. If null, the Yext privacy policy link will be used.
    attr_accessor :privacy_policy_override

    # Enables review invitations by email and indicates the maximum number of email invites our system will send on a per-location, per-day basis.  Must contain an integer value between 0 and 200. If 0 or null, review invitations by email will be disabled. 
    attr_accessor :max_emails_per_day

    # Indicates the maximum number of text invites our system will send on a per-location, per-month basis. 
    attr_accessor :max_texts_per_month


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'max_contact_frequency' => :'maxContactFrequency',
        :'max_texts_per_day' => :'maxTextsPerDay',
        :'site_distribution' => :'siteDistribution',
        :'balancing_optimization' => :'balancingOptimization',
        :'algorithm_configuration' => :'algorithmConfiguration',
        :'review_quarantine_days' => :'reviewQuarantineDays',
        :'privacy_policy_override' => :'privacyPolicyOverride',
        :'max_emails_per_day' => :'maxEmailsPerDay',
        :'max_texts_per_month' => :'maxTextsPerMonth'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'max_contact_frequency' => :'Integer',
        :'max_texts_per_day' => :'Integer',
        :'site_distribution' => :'Hash<String, Object>',
        :'balancing_optimization' => :'String',
        :'algorithm_configuration' => :'Array<String>',
        :'review_quarantine_days' => :'Integer',
        :'privacy_policy_override' => :'String',
        :'max_emails_per_day' => :'Integer',
        :'max_texts_per_month' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'maxContactFrequency')
        self.max_contact_frequency = attributes[:'maxContactFrequency']
      end

      if attributes.has_key?(:'maxTextsPerDay')
        self.max_texts_per_day = attributes[:'maxTextsPerDay']
      end

      if attributes.has_key?(:'siteDistribution')
        if (value = attributes[:'siteDistribution']).is_a?(Array)
          self.site_distribution = value
        end
      end

      if attributes.has_key?(:'balancingOptimization')
        self.balancing_optimization = attributes[:'balancingOptimization']
      end

      if attributes.has_key?(:'algorithmConfiguration')
        if (value = attributes[:'algorithmConfiguration']).is_a?(Array)
          self.algorithm_configuration = value
        end
      end

      if attributes.has_key?(:'reviewQuarantineDays')
        self.review_quarantine_days = attributes[:'reviewQuarantineDays']
      end

      if attributes.has_key?(:'privacyPolicyOverride')
        self.privacy_policy_override = attributes[:'privacyPolicyOverride']
      end

      if attributes.has_key?(:'maxEmailsPerDay')
        self.max_emails_per_day = attributes[:'maxEmailsPerDay']
      end

      if attributes.has_key?(:'maxTextsPerMonth')
        self.max_texts_per_month = attributes[:'maxTextsPerMonth']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@max_texts_per_day.nil? && @max_texts_per_day > 20.0
        invalid_properties.push("invalid value for 'max_texts_per_day', must be smaller than or equal to 20.0.")
      end

      if !@max_texts_per_day.nil? && @max_texts_per_day < 1.0
        invalid_properties.push("invalid value for 'max_texts_per_day', must be greater than or equal to 1.0.")
      end

      if !@review_quarantine_days.nil? && @review_quarantine_days > 7.0
        invalid_properties.push("invalid value for 'review_quarantine_days', must be smaller than or equal to 7.0.")
      end

      if !@review_quarantine_days.nil? && @review_quarantine_days < 0.0
        invalid_properties.push("invalid value for 'review_quarantine_days', must be greater than or equal to 0.0.")
      end

      if !@max_emails_per_day.nil? && @max_emails_per_day > 200.0
        invalid_properties.push("invalid value for 'max_emails_per_day', must be smaller than or equal to 200.0.")
      end

      if !@max_emails_per_day.nil? && @max_emails_per_day < 0.0
        invalid_properties.push("invalid value for 'max_emails_per_day', must be greater than or equal to 0.0.")
      end

      if !@max_texts_per_month.nil? && @max_texts_per_month < 1.0
        invalid_properties.push("invalid value for 'max_texts_per_month', must be greater than or equal to 1.0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@max_texts_per_day.nil? && @max_texts_per_day > 20.0
      return false if !@max_texts_per_day.nil? && @max_texts_per_day < 1.0
      return false if !@review_quarantine_days.nil? && @review_quarantine_days > 7.0
      return false if !@review_quarantine_days.nil? && @review_quarantine_days < 0.0
      return false if !@max_emails_per_day.nil? && @max_emails_per_day > 200.0
      return false if !@max_emails_per_day.nil? && @max_emails_per_day < 0.0
      return false if !@max_texts_per_month.nil? && @max_texts_per_month < 1.0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] max_texts_per_day Value to be assigned
    def max_texts_per_day=(max_texts_per_day)

      if !max_texts_per_day.nil? && max_texts_per_day > 20.0
        fail ArgumentError, "invalid value for 'max_texts_per_day', must be smaller than or equal to 20.0."
      end

      if !max_texts_per_day.nil? && max_texts_per_day < 1.0
        fail ArgumentError, "invalid value for 'max_texts_per_day', must be greater than or equal to 1.0."
      end

      @max_texts_per_day = max_texts_per_day
    end

    # Custom attribute writer method with validation
    # @param [Object] review_quarantine_days Value to be assigned
    def review_quarantine_days=(review_quarantine_days)

      if !review_quarantine_days.nil? && review_quarantine_days > 7.0
        fail ArgumentError, "invalid value for 'review_quarantine_days', must be smaller than or equal to 7.0."
      end

      if !review_quarantine_days.nil? && review_quarantine_days < 0.0
        fail ArgumentError, "invalid value for 'review_quarantine_days', must be greater than or equal to 0.0."
      end

      @review_quarantine_days = review_quarantine_days
    end

    # Custom attribute writer method with validation
    # @param [Object] max_emails_per_day Value to be assigned
    def max_emails_per_day=(max_emails_per_day)

      if !max_emails_per_day.nil? && max_emails_per_day > 200.0
        fail ArgumentError, "invalid value for 'max_emails_per_day', must be smaller than or equal to 200.0."
      end

      if !max_emails_per_day.nil? && max_emails_per_day < 0.0
        fail ArgumentError, "invalid value for 'max_emails_per_day', must be greater than or equal to 0.0."
      end

      @max_emails_per_day = max_emails_per_day
    end

    # Custom attribute writer method with validation
    # @param [Object] max_texts_per_month Value to be assigned
    def max_texts_per_month=(max_texts_per_month)

      if !max_texts_per_month.nil? && max_texts_per_month < 1.0
        fail ArgumentError, "invalid value for 'max_texts_per_month', must be greater than or equal to 1.0."
      end

      @max_texts_per_month = max_texts_per_month
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_contact_frequency == o.max_contact_frequency &&
          max_texts_per_day == o.max_texts_per_day &&
          site_distribution == o.site_distribution &&
          balancing_optimization == o.balancing_optimization &&
          algorithm_configuration == o.algorithm_configuration &&
          review_quarantine_days == o.review_quarantine_days &&
          privacy_policy_override == o.privacy_policy_override &&
          max_emails_per_day == o.max_emails_per_day &&
          max_texts_per_month == o.max_texts_per_month
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [max_contact_frequency, max_texts_per_day, site_distribution, balancing_optimization, algorithm_configuration, review_quarantine_days, privacy_policy_override, max_emails_per_day, max_texts_per_month].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = YextClient.const_get(type).new
        if defined? temp_model.isEnum 
          value.to_s
        else
          temp_model.build_from_hash(value)
        end
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
