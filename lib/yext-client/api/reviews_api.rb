=begin
#Yext API

# 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module YextClient
  class ReviewsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Comments: Create
    # Creates a new Comment on a Review.
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Content of the new comment.
    # @option opts [String] :visibility  (default to PUBLIC)
    # @option opts [Integer] :parent_id If this Comment is in response to another Comment, use this field to specify the ID of the parent Comment.
    # @return [ErrorResponse]
    def create_comment(account_id, review_id, v, opts = {})
      data, _status_code, _headers = create_comment_with_http_info(account_id, review_id, v, opts)
      return data
    end

    # Comments: Create
    # Creates a new Comment on a Review.
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content Content of the new comment.
    # @option opts [String] :visibility 
    # @option opts [Integer] :parent_id If this Comment is in response to another Comment, use this field to specify the ID of the parent Comment.
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def create_comment_with_http_info(account_id, review_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.create_comment ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_comment" if account_id.nil?
      # verify the required parameter 'review_id' is set
      fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.create_comment" if review_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_comment" if v.nil?
      if opts[:'visibility'] && !['PUBLIC', 'PRIVATE'].include?(opts[:'visibility'])
        fail ArgumentError, 'invalid value for "visibility", must be one of PUBLIC, PRIVATE'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/reviews/{reviewId}/comments".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'reviewId' + '}', review_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?
      query_params[:'parentId'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: Create
    # Create a new External First Party Review. <br><br>  ## Required fields * **`locationId`** * **`authorName`** * **`authorEmail`** * **`rating`** * **`content`**   ## Optional fields * **`status`** 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_id The ID of the location associated with the review.
    # @param author_name The name of the person who wrote the review.
    # @param author_email The email address of the person who wrote the review.
    # @param rating The rating of the review from 1 to 5.
    # @param content The content of the review.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status  (default to QUARANTINED)
    # @return [IdResponse]
    def create_review(account_id, v, location_id, author_name, author_email, rating, content, opts = {})
      data, _status_code, _headers = create_review_with_http_info(account_id, v, location_id, author_name, author_email, rating, content, opts)
      return data
    end

    # Reviews: Create
    # Create a new External First Party Review. &lt;br&gt;&lt;br&gt;  ## Required fields * **&#x60;locationId&#x60;** * **&#x60;authorName&#x60;** * **&#x60;authorEmail&#x60;** * **&#x60;rating&#x60;** * **&#x60;content&#x60;**   ## Optional fields * **&#x60;status&#x60;** 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param location_id The ID of the location associated with the review.
    # @param author_name The name of the person who wrote the review.
    # @param author_email The email address of the person who wrote the review.
    # @param rating The rating of the review from 1 to 5.
    # @param content The content of the review.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status 
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_review_with_http_info(account_id, v, location_id, author_name, author_email, rating, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.create_review ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_review" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_review" if v.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling ReviewsApi.create_review" if location_id.nil?
      # verify the required parameter 'author_name' is set
      fail ArgumentError, "Missing the required parameter 'author_name' when calling ReviewsApi.create_review" if author_name.nil?
      # verify the required parameter 'author_email' is set
      fail ArgumentError, "Missing the required parameter 'author_email' when calling ReviewsApi.create_review" if author_email.nil?
      # verify the required parameter 'rating' is set
      fail ArgumentError, "Missing the required parameter 'rating' when calling ReviewsApi.create_review" if rating.nil?
      # verify the required parameter 'content' is set
      fail ArgumentError, "Missing the required parameter 'content' when calling ReviewsApi.create_review" if content.nil?
      if opts[:'status'] && !['QUARANTINED', 'LIVE'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of QUARANTINED, LIVE'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/reviews".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'locationId'] = location_id
      query_params[:'authorName'] = author_name
      query_params[:'authorEmail'] = author_email
      query_params[:'rating'] = rating
      query_params[:'content'] = content
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitations: Create
    # Sends review invitations to one or more consumers.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param reviews 
    # @param [Hash] opts the optional parameters
    # @return [Array<CreateReviewInvitationResponse>]
    def create_review_invites(account_id, v, reviews, opts = {})
      data, _status_code, _headers = create_review_invites_with_http_info(account_id, v, reviews, opts)
      return data
    end

    # Review Invitations: Create
    # Sends review invitations to one or more consumers.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param reviews 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CreateReviewInvitationResponse>, Fixnum, Hash)>] Array<CreateReviewInvitationResponse> data, response status code and response headers
    def create_review_invites_with_http_info(account_id, v, reviews, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.create_review_invites ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_review_invites" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_review_invites" if v.nil?
      # verify the required parameter 'reviews' is set
      fail ArgumentError, "Missing the required parameter 'reviews' when calling ReviewsApi.create_review_invites" if reviews.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/reviewinvites".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(reviews)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CreateReviewInvitationResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_review_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: Get
    # Retrieve a specific Review.
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ReviewResponse]
    def get_review(account_id, review_id, v, opts = {})
      data, _status_code, _headers = get_review_with_http_info(account_id, review_id, v, opts)
      return data
    end

    # Reviews: Get
    # Retrieve a specific Review.
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReviewResponse, Fixnum, Hash)>] ReviewResponse data, response status code and response headers
    def get_review_with_http_info(account_id, review_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.get_review ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.get_review" if account_id.nil?
      # verify the required parameter 'review_id' is set
      fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.get_review" if review_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.get_review" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/reviews/{reviewId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'reviewId' + '}', review_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReviewResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#get_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Generation Settings: Get
    # Returns all current generation settings for a specified account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [GetReviewGenerationSettingsResponse]
    def get_review_generation_settings(account_id, v, opts = {})
      data, _status_code, _headers = get_review_generation_settings_with_http_info(account_id, v, opts)
      return data
    end

    # Review Generation Settings: Get
    # Returns all current generation settings for a specified account.
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetReviewGenerationSettingsResponse, Fixnum, Hash)>] GetReviewGenerationSettingsResponse data, response status code and response headers
    def get_review_generation_settings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.get_review_generation_settings ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.get_review_generation_settings" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.get_review_generation_settings" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/reviews/settings/generation".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetReviewGenerationSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#get_review_generation_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: List
    # Retrieve all Reviews matching the given criteria.  **NOTE:** Yelp Reviews are **not** included. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset Number of results to skip. Used to page through results. (default to 0)
    # @option opts [Array<String>] :location_ids When provided, only reviews for the requested locations will be returned.  By default, reviews will be returned for all locations subscribed to Review Monitoring.  **Example:** loc123,loc456,loc789 
    # @option opts [String] :folder_id When provided, only reviews for locations in the given folder and its subfolders will be included in the results.
    # @option opts [Array<String>] :countries When present, only reviews for locations in the given countries will be returned. Countries are denoted by ISO 3166 2-letter country codes.
    # @option opts [Array<String>] :location_labels When present, only reviews for location with the provided labels will be returned.
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [String] :review_content When specified, only reviews that include the provided content will be returned.
    # @option opts [Float] :min_rating When specified, only reviews with the provided minimum rating or higher will be returned.
    # @option opts [Float] :max_rating 
    # @option opts [Date] :min_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or after the given date will be returned.
    # @option opts [Date] :max_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or before the given date will be returned.
    # @option opts [Date] :min_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or after the given date will be returned.
    # @option opts [Date] :max_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or before the given date will be returned.
    # @option opts [String] :awaiting_response When specified, only reviews that are awaiting an owner reply on the given objects will be returned.  For example, when &#x60;awaitingResponse&#x3D;COMMENT&#x60;, reviews will only be returned if they have at least one comment that has not been responded to by the owner. 
    # @option opts [Integer] :min_non_owner_comments When specified, only reviews that have at least the provided number of non-owner comments will be returned.
    # @option opts [String] :reviewer_name When specified, only reviews whose authorName contains the provided string will be returned.
    # @option opts [String] :reviewer_email When specified, only reviews whose authorEmail matches the provided email address will be returned.
    # @return [ReviewsResponse]
    def list_reviews(account_id, v, opts = {})
      data, _status_code, _headers = list_reviews_with_http_info(account_id, v, opts)
      return data
    end

    # Reviews: List
    # Retrieve all Reviews matching the given criteria.  **NOTE:** Yelp Reviews are **not** included. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset Number of results to skip. Used to page through results.
    # @option opts [Array<String>] :location_ids When provided, only reviews for the requested locations will be returned.  By default, reviews will be returned for all locations subscribed to Review Monitoring.  **Example:** loc123,loc456,loc789 
    # @option opts [String] :folder_id When provided, only reviews for locations in the given folder and its subfolders will be included in the results.
    # @option opts [Array<String>] :countries When present, only reviews for locations in the given countries will be returned. Countries are denoted by ISO 3166 2-letter country codes.
    # @option opts [Array<String>] :location_labels When present, only reviews for location with the provided labels will be returned.
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [String] :review_content When specified, only reviews that include the provided content will be returned.
    # @option opts [Float] :min_rating When specified, only reviews with the provided minimum rating or higher will be returned.
    # @option opts [Float] :max_rating 
    # @option opts [Date] :min_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or after the given date will be returned.
    # @option opts [Date] :max_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or before the given date will be returned.
    # @option opts [Date] :min_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or after the given date will be returned.
    # @option opts [Date] :max_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or before the given date will be returned.
    # @option opts [String] :awaiting_response When specified, only reviews that are awaiting an owner reply on the given objects will be returned.  For example, when &#x60;awaitingResponse&#x3D;COMMENT&#x60;, reviews will only be returned if they have at least one comment that has not been responded to by the owner. 
    # @option opts [Integer] :min_non_owner_comments When specified, only reviews that have at least the provided number of non-owner comments will be returned.
    # @option opts [String] :reviewer_name When specified, only reviews whose authorName contains the provided string will be returned.
    # @option opts [String] :reviewer_email When specified, only reviews whose authorEmail matches the provided email address will be returned.
    # @return [Array<(ReviewsResponse, Fixnum, Hash)>] ReviewsResponse data, response status code and response headers
    def list_reviews_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.list_reviews ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.list_reviews" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.list_reviews" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 100.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReviewsApi.list_reviews, must be smaller than or equal to 100.0.'
      end

      if opts[:'awaiting_response'] && !['REVIEW', 'COMMENT', 'REVIEW_OR_COMMENT'].include?(opts[:'awaiting_response'])
        fail ArgumentError, 'invalid value for "awaiting_response", must be one of REVIEW, COMMENT, REVIEW_OR_COMMENT'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/reviews".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'folderId'] = opts[:'folder_id'] if !opts[:'folder_id'].nil?
      query_params[:'countries'] = @api_client.build_collection_param(opts[:'countries'], :csv) if !opts[:'countries'].nil?
      query_params[:'locationLabels'] = @api_client.build_collection_param(opts[:'location_labels'], :csv) if !opts[:'location_labels'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?
      query_params[:'reviewContent'] = opts[:'review_content'] if !opts[:'review_content'].nil?
      query_params[:'minRating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'maxRating'] = opts[:'max_rating'] if !opts[:'max_rating'].nil?
      query_params[:'minPublisherDate'] = opts[:'min_publisher_date'] if !opts[:'min_publisher_date'].nil?
      query_params[:'maxPublisherDate'] = opts[:'max_publisher_date'] if !opts[:'max_publisher_date'].nil?
      query_params[:'minLastYextUpdateDate'] = opts[:'min_last_yext_update_date'] if !opts[:'min_last_yext_update_date'].nil?
      query_params[:'maxLastYextUpdateDate'] = opts[:'max_last_yext_update_date'] if !opts[:'max_last_yext_update_date'].nil?
      query_params[:'awaitingResponse'] = opts[:'awaiting_response'] if !opts[:'awaiting_response'].nil?
      query_params[:'minNonOwnerComments'] = opts[:'min_non_owner_comments'] if !opts[:'min_non_owner_comments'].nil?
      query_params[:'reviewerName'] = opts[:'reviewer_name'] if !opts[:'reviewer_name'].nil?
      query_params[:'reviewerEmail'] = opts[:'reviewer_email'] if !opts[:'reviewer_email'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReviewsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#list_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: Update
    # Updates an External First Party Review. <br><br> **NOTE:** Despite using the `PUT` method, Reviews: Update only updates supplied fields. Omitted fields are not modified. 
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author_name The name of the person who wrote the review.
    # @option opts [String] :author_email The email address of the person who wrote the review.
    # @option opts [Integer] :rating The rating of the review from 1 to 5.
    # @option opts [String] :content The content of the review.
    # @option opts [String] :status 
    # @return [IdResponse]
    def update_review(account_id, review_id, v, opts = {})
      data, _status_code, _headers = update_review_with_http_info(account_id, review_id, v, opts)
      return data
    end

    # Reviews: Update
    # Updates an External First Party Review. &lt;br&gt;&lt;br&gt; **NOTE:** Despite using the &#x60;PUT&#x60; method, Reviews: Update only updates supplied fields. Omitted fields are not modified. 
    # @param account_id 
    # @param review_id ID of this Review.
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author_name The name of the person who wrote the review.
    # @option opts [String] :author_email The email address of the person who wrote the review.
    # @option opts [Integer] :rating The rating of the review from 1 to 5.
    # @option opts [String] :content The content of the review.
    # @option opts [String] :status 
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def update_review_with_http_info(account_id, review_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.update_review ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review" if account_id.nil?
      # verify the required parameter 'review_id' is set
      fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.update_review" if review_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review" if v.nil?
      if opts[:'status'] && !['QUARANTINED', 'LIVE'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of QUARANTINED, LIVE'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/reviews/{reviewId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'reviewId' + '}', review_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'authorName'] = opts[:'author_name'] if !opts[:'author_name'].nil?
      query_params[:'authorEmail'] = opts[:'author_email'] if !opts[:'author_email'].nil?
      query_params[:'rating'] = opts[:'rating'] if !opts[:'rating'].nil?
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Generation Settings: Update
    # Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_generation_settings_request 
    # @param [Hash] opts the optional parameters
    # @return [GetReviewGenerationSettingsResponse]
    def update_review_generation_settings(account_id, v, review_generation_settings_request, opts = {})
      data, _status_code, _headers = update_review_generation_settings_with_http_info(account_id, v, review_generation_settings_request, opts)
      return data
    end

    # Review Generation Settings: Update
    # Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_generation_settings_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetReviewGenerationSettingsResponse, Fixnum, Hash)>] GetReviewGenerationSettingsResponse data, response status code and response headers
    def update_review_generation_settings_with_http_info(account_id, v, review_generation_settings_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReviewsApi.update_review_generation_settings ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review_generation_settings" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review_generation_settings" if v.nil?
      # verify the required parameter 'review_generation_settings_request' is set
      fail ArgumentError, "Missing the required parameter 'review_generation_settings_request' when calling ReviewsApi.update_review_generation_settings" if review_generation_settings_request.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/reviews/settings/generation".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(review_generation_settings_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetReviewGenerationSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review_generation_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
