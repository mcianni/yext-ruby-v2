=begin
#Yext API

# 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module YextClient
  class PowerListingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Duplicates: Create (January 2017)
    # Creates a new Duplicate with status SUPPRESSION_REQUESTED
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param url URL of the Duplicate listing
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [IdResponse]
    def create_duplicate(account_id, v, url, opts = {})
      data, _status_code, _headers = create_duplicate_with_http_info(account_id, v, url, opts)
      return data
    end

    # Duplicates: Create (January 2017)
    # Creates a new Duplicate with status SUPPRESSION_REQUESTED
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param url URL of the Duplicate listing
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [Array<(IdResponse, Fixnum, Hash)>] IdResponse data, response status code and response headers
    def create_duplicate_with_http_info(account_id, v, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.create_duplicate ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.create_duplicate" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.create_duplicate" if v.nil?
      # verify the required parameter 'url' is set
      fail ArgumentError, "Missing the required parameter 'url' when calling PowerListingsApi.create_duplicate" if url.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/duplicates".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'url'] = url
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#create_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: Delete (January 2017)
    # Indicates that a Duplicate should be ignored
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id 
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def delete_duplicate(account_id, v, duplicate_id, opts = {})
      data, _status_code, _headers = delete_duplicate_with_http_info(account_id, v, duplicate_id, opts)
      return data
    end

    # Duplicates: Delete (January 2017)
    # Indicates that a Duplicate should be ignored
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def delete_duplicate_with_http_info(account_id, v, duplicate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.delete_duplicate ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.delete_duplicate" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.delete_duplicate" if v.nil?
      # verify the required parameter 'duplicate_id' is set
      fail ArgumentError, "Missing the required parameter 'duplicate_id' when calling PowerListingsApi.delete_duplicate" if duplicate_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/duplicates/{duplicateId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'duplicateId' + '}', duplicate_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#delete_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: Get
    # Fetches details of a specific Publisher Suggestion
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id 
    # @param [Hash] opts the optional parameters
    # @return [PublisherSuggestionResponse]
    def get_publisher_suggestion(account_id, v, suggestion_id, opts = {})
      data, _status_code, _headers = get_publisher_suggestion_with_http_info(account_id, v, suggestion_id, opts)
      return data
    end

    # Publisher Suggestions: Get
    # Fetches details of a specific Publisher Suggestion
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublisherSuggestionResponse, Fixnum, Hash)>] PublisherSuggestionResponse data, response status code and response headers
    def get_publisher_suggestion_with_http_info(account_id, v, suggestion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.get_publisher_suggestion ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.get_publisher_suggestion" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.get_publisher_suggestion" if v.nil?
      # verify the required parameter 'suggestion_id' is set
      fail ArgumentError, "Missing the required parameter 'suggestion_id' when calling PowerListingsApi.get_publisher_suggestion" if suggestion_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/publishersuggestions/{suggestionId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'suggestionId' + '}', suggestion_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublisherSuggestionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#get_publisher_suggestion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: List (January 2017)
    # Retrieve Duplicates for an account
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset Number of results to skip. Used to page through results. (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [Array<String>] :statuses When specified, only Duplicates with the provided statuses will be returned  **Example:** POSSIBLE_DUPLICATE,SUPPRESSION_REQUESTED 
    # @return [DuplicatesResponse]
    def list_duplicates(account_id, v, opts = {})
      data, _status_code, _headers = list_duplicates_with_http_info(account_id, v, opts)
      return data
    end

    # Duplicates: List (January 2017)
    # Retrieve Duplicates for an account
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return
    # @option opts [Integer] :offset Number of results to skip. Used to page through results.
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [Array<String>] :statuses When specified, only Duplicates with the provided statuses will be returned  **Example:** POSSIBLE_DUPLICATE,SUPPRESSION_REQUESTED 
    # @return [Array<(DuplicatesResponse, Fixnum, Hash)>] DuplicatesResponse data, response status code and response headers
    def list_duplicates_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.list_duplicates ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.list_duplicates" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.list_duplicates" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PowerListingsApi.list_duplicates, must be smaller than or equal to 50.0.'
      end

      if opts[:'statuses'] && !['POSSIBLE_DUPLICATE', 'SUPPRESSION_REQUESTED', 'SUPPRESSED', 'UNAVAILABLE'].include?(opts[:'statuses'])
        fail ArgumentError, 'invalid value for "statuses", must be one of POSSIBLE_DUPLICATE, SUPPRESSION_REQUESTED, SUPPRESSED, UNAVAILABLE'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/duplicates".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :csv) if !opts[:'statuses'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DuplicatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#list_duplicates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: List
    # Retrieve all Listings matching the given criteria including status and reasons why a Listing may be unavailable
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 100)
    # @option opts [Integer] :offset Number of results to skip. Used to page through results. (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [ListingsResponse]
    def list_listings(account_id, v, opts = {})
      data, _status_code, _headers = list_listings_with_http_info(account_id, v, opts)
      return data
    end

    # Listings: List
    # Retrieve all Listings matching the given criteria including status and reasons why a Listing may be unavailable
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return
    # @option opts [Integer] :offset Number of results to skip. Used to page through results.
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [Array<(ListingsResponse, Fixnum, Hash)>] ListingsResponse data, response status code and response headers
    def list_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.list_listings ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.list_listings" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.list_listings" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 100.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PowerListingsApi.list_listings, must be smaller than or equal to 100.0.'
      end

      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/listings".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#list_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: List
    # Retrieve suggestions publishers have submitted for the Locations in an account
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset Number of results to skip. Used to page through results. (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [Array<String>] :statuses When specified, only Publisher Suggestions with the provided statuses will be returned  **Example:** WAITING_ON_CUSTOMER,EXPIRED 
    # @return [PublisherSuggestionsResponse]
    def list_publisher_suggestions(account_id, v, opts = {})
      data, _status_code, _headers = list_publisher_suggestions_with_http_info(account_id, v, opts)
      return data
    end

    # Publisher Suggestions: List
    # Retrieve suggestions publishers have submitted for the Locations in an account
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return
    # @option opts [Integer] :offset Number of results to skip. Used to page through results.
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @option opts [Array<String>] :statuses When specified, only Publisher Suggestions with the provided statuses will be returned  **Example:** WAITING_ON_CUSTOMER,EXPIRED 
    # @return [Array<(PublisherSuggestionsResponse, Fixnum, Hash)>] PublisherSuggestionsResponse data, response status code and response headers
    def list_publisher_suggestions_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.list_publisher_suggestions ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.list_publisher_suggestions" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.list_publisher_suggestions" if v.nil?
      if !opts[:'limit'].nil? && opts[:'limit'] > 50.0
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PowerListingsApi.list_publisher_suggestions, must be smaller than or equal to 50.0.'
      end

      if opts[:'statuses'] && !['WAITING_ON_CUSTOMER', 'ACCEPTED', 'REJECTED', 'EXPIRED'].include?(opts[:'statuses'])
        fail ArgumentError, 'invalid value for "statuses", must be one of WAITING_ON_CUSTOMER, ACCEPTED, REJECTED, EXPIRED'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/publishersuggestions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :csv) if !opts[:'statuses'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublisherSuggestionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#list_publisher_suggestions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publishers: List
    # Retrieve list of Publishers
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subset **ALL** - return all publishers  **RELEVANT_ONLY** - only return publishers relevant to the account based on supported countries and location types  (default to RELEVANT_ONLY)
    # @return [PublishersResponse]
    def list_publishers(account_id, v, opts = {})
      data, _status_code, _headers = list_publishers_with_http_info(account_id, v, opts)
      return data
    end

    # Publishers: List
    # Retrieve list of Publishers
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subset **ALL** - return all publishers  **RELEVANT_ONLY** - only return publishers relevant to the account based on supported countries and location types 
    # @return [Array<(PublishersResponse, Fixnum, Hash)>] PublishersResponse data, response status code and response headers
    def list_publishers_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.list_publishers ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.list_publishers" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.list_publishers" if v.nil?
      if opts[:'subset'] && !['ALL', 'RELEVANT_ONLY'].include?(opts[:'subset'])
        fail ArgumentError, 'invalid value for "subset", must be one of ALL, RELEVANT_ONLY'
      end
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/publishers".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'subset'] = opts[:'subset'] if !opts[:'subset'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublishersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#list_publishers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: Opt In
    # Opts designated locations into designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [ErrorResponse]
    def opt_in_listings(account_id, v, opts = {})
      data, _status_code, _headers = opt_in_listings_with_http_info(account_id, v, opts)
      return data
    end

    # Listings: Opt In
    # Opts designated locations into designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def opt_in_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.opt_in_listings ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.opt_in_listings" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.opt_in_listings" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/listings/optin".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#opt_in_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: Opt Out
    # Opts designated locations out of designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [ErrorResponse]
    def opt_out_listings(account_id, v, opts = {})
      data, _status_code, _headers = opt_out_listings_with_http_info(account_id, v, opts)
      return data
    end

    # Listings: Opt Out
    # Opts designated locations out of designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by account.  **Example:** MAPQUEST,YELP 
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def opt_out_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.opt_out_listings ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.opt_out_listings" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.opt_out_listings" if v.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/listings/optout".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :multi) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#opt_out_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: Suppress (January 2017)
    # Request suppression of a Duplicate
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id 
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def suppress_duplicate(account_id, v, duplicate_id, opts = {})
      data, _status_code, _headers = suppress_duplicate_with_http_info(account_id, v, duplicate_id, opts)
      return data
    end

    # Duplicates: Suppress (January 2017)
    # Request suppression of a Duplicate
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def suppress_duplicate_with_http_info(account_id, v, duplicate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.suppress_duplicate ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.suppress_duplicate" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.suppress_duplicate" if v.nil?
      # verify the required parameter 'duplicate_id' is set
      fail ArgumentError, "Missing the required parameter 'duplicate_id' when calling PowerListingsApi.suppress_duplicate" if duplicate_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/duplicates/{duplicateId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'duplicateId' + '}', duplicate_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#suppress_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: Update
    # Accept or reject a Publisher Suggestion
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id 
    # @param status The status of the Publisher Suggestion
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def update_publisher_suggestion(account_id, v, suggestion_id, status, opts = {})
      data, _status_code, _headers = update_publisher_suggestion_with_http_info(account_id, v, suggestion_id, status, opts)
      return data
    end

    # Publisher Suggestions: Update
    # Accept or reject a Publisher Suggestion
    # @param account_id 
    # @param v A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id 
    # @param status The status of the Publisher Suggestion
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Fixnum, Hash)>] ErrorResponse data, response status code and response headers
    def update_publisher_suggestion_with_http_info(account_id, v, suggestion_id, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PowerListingsApi.update_publisher_suggestion ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PowerListingsApi.update_publisher_suggestion" if account_id.nil?
      # verify the required parameter 'v' is set
      fail ArgumentError, "Missing the required parameter 'v' when calling PowerListingsApi.update_publisher_suggestion" if v.nil?
      # verify the required parameter 'suggestion_id' is set
      fail ArgumentError, "Missing the required parameter 'suggestion_id' when calling PowerListingsApi.update_publisher_suggestion" if suggestion_id.nil?
      # verify the required parameter 'status' is set
      fail ArgumentError, "Missing the required parameter 'status' when calling PowerListingsApi.update_publisher_suggestion" if status.nil?
      # verify enum value
      unless ['ACCEPTED', 'REJECTED'].include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of ACCEPTED, REJECTED"
      end
      # resource path
      local_var_path = "/accounts/{accountId}/powerlistings/publishersuggestions/{suggestionId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'suggestionId' + '}', suggestion_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'v'] = v
      query_params[:'status'] = status

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PowerListingsApi#update_publisher_suggestion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
