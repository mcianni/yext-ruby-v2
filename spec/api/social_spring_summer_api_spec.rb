=begin
#Yext API

# 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for YextClient::SocialSpringSummerApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SocialSpringSummerApi' do
  before do
    # run before each test
    @instance = YextClient::SocialSpringSummerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SocialSpringSummerApi' do
    it 'should create an instact of SocialSpringSummerApi' do
      expect(@instance).to be_instance_of(YextClient::SocialSpringSummerApi)
    end
  end

  # unit tests for create_comment
  # Comments: Create
  # Create a new Comment in response to another Post / Comment.
  # @param account_id 
  # @param post_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param parent_id The ID of the Comment this Comment is replying to.  **Example** 123 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :message The message included in the Comment, if any.  **Example** “Hello, World!” 
  # @option opts [String] :photo_url The URL of the photo included in the Comment, if any.  **Example** “https://…” 
  # @option opts [String] :link_url The URL of the link included in the Comment, if any.  **Example** “https://…” 
  # @return [IdResponse]
  describe 'create_comment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_posts
  # Posts: Create
  # Create a new Post.
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param location_ids List of Location IDs for this Post
  # @param publisher_ids List of Publisher IDs for this Post
  # @param message The message included in the Post, if any.  **Example** \&quot;Hello, World!\&quot; 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :photo_url The URL of the photo included in the Post, if any.  **Example** \&quot;https://...\&quot; 
  # @option opts [String] :link_url The URL of the link included in the Post, if any.  **Example** \&quot;https://...\&quot; 
  # @return [IdResponse]
  describe 'create_posts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_comment
  # Comments: delete
  # Deletes an existing Comment.
  # @param account_id 
  # @param post_id 
  # @param comment_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @return [ErrorResponse]
  describe 'delete_comment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_post
  # Posts: Delete
  # Deletes an existing Post.
  # @param account_id 
  # @param post_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @return [ErrorResponse]
  describe 'delete_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_comments
  # Comments: List
  # Retrieve list of Comments for a Post.
  # @param account_id 
  # @param post_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return, up to 100. Default 100.  **Example** 20 
  # @option opts [Integer] :offset Number of results to skip. Used to page through results.
  # @option opts [String] :type Determines which type of Comments are returned
  # @return [SocialCommentsResponse]
  describe 'get_comments test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_linked_account
  # Linked Accounts: Get
  # Retrieve a specific Linked Account.
  # @param account_id 
  # @param linked_account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @return [LinkedAccountResponse]
  describe 'get_linked_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_linked_accounts
  # Linked Accounts: List
  # Retrieve all Linked Accounts and their last known statuses.
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return, up to 100. Default 100.  **Example** 20 
  # @option opts [Integer] :offset Number of results to skip. Used to page through results.
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a PowerListings subscription.  **Example** 123, 456, 789 
  # @option opts [Array<String>] :publisher_ids Defaults to all publishers subscribed by account  **Example** FACEBOOK, FOURSQUARE 
  # @option opts [String] :status Used to filter for Linked Accounts with a particular status.
  # @return [LinkedAccountsResponse]
  describe 'get_linked_accounts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_posts
  # Posts: List
  # Retrieve list of Posts.
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return, up to 100. Default 100.  **Example** 20 
  # @option opts [Integer] :offset Number of results to skip. Used to page through results.
  # @option opts [Array<String>] :location_ids When provided, only Posts that involve the requested locations will be returned.  By defaults, Posts will be returned for all locations subscribed to Social Posting.  **Example** 123, 456, 789 
  # @option opts [String] :folder_id When provided, only Posts for locations in the given folder and its subfolders will be included in the results.  **Example** 123 
  # @option opts [Array<String>] :countries Array of 3166 Alpha-2 country codes. When present, only Posts for locations in the given countries will be returned.  **Example** [&#39;US&#39;, &#39;CA&#39;] 
  # @option opts [Array<String>] :location_labels Array of location labels. When present, only Posts for location with the provided labels will be returned.  **Example** [&#39;pilot stores&#39;] 
  # @option opts [Array<String>] :publisher_ids Defaults to all publishers subscribed by account  **Example** FACEBOOK, FOURSQUARE 
  # @option opts [Array<String>] :keywords When provided, only Posts that mention the given keywords will be returned. Posts will be returned if the original post or any comments contain this string.  **Example** [&#39;pizza&#39;] 
  # @return [SocialPostsResponse]
  describe 'get_posts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_comment
  # Comments: Update
  # Updates an existing Comment.    **NOTE:** Only updates supplied fields (aka PATCH). 
  # @param account_id 
  # @param post_id 
  # @param comment_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param comment 
  # @param [Hash] opts the optional parameters
  # @return [ErrorResponse]
  describe 'update_comment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_linked_account
  # Linked Accounts: Update
  # Assign or Unassign a Linked Account to one or more Locations.  **Note:** When assigning Locations to a Linked Account, if any of the Locations are already assigned to another Linked Account with the same Publisher, they will be re-assigned to this Linked Account, and lose their association with the previous Linked Account.  **Note:** It is an error to include the same Location ID in both the assignLocations and unassignLocations lists in the same request. 
  # @param account_id 
  # @param linked_account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :assign_location_ids Array of Location IDs to be assigned to this Linked Account.  Use this field to assign this Linked Account to Locations without affecting any other assigned Locations.  
  # @option opts [Array<String>] :unassign_location_ids Array of Location IDs to be unassigned from this Linked Account.  Use this field to unassign this Linked Account from Locations without affecting any other assigned Locations. 
  # @return [ErrorResponse]
  describe 'update_linked_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
